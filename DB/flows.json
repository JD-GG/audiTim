[
    {
        "id": "6761cd81a24d274a",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6eb1bac4457d8171",
        "type": "mqtt in",
        "z": "6761cd81a24d274a",
        "name": "MQTT-Node",
        "topic": "dhbw/ai/si2023/5/max4466/0",
        "qos": "2",
        "datatype": "json",
        "broker": "18d3dd12ac8f58c2",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 210,
        "y": 260,
        "wires": [
            [
                "caa9d18689140a85",
                "5d3d7afe95690940"
            ]
        ]
    },
    {
        "id": "caa9d18689140a85",
        "type": "function",
        "z": "6761cd81a24d274a",
        "name": "function 1",
        "func": "const data = msg.payload;\n\nconst baseTimestamp = Number(data.timestamp) * 1000; // convert to ms\nconst baseSequence = data.sequence;\nconst values = data.value;\n\nconst numSensors = 4;\nconst readingsPerSensor = 10;\nconst timeStep = 100; // ms between samples\n\nconst result = [];\n\nfor (let sensor = 0; sensor < numSensors; sensor++) {\n    for (let i = 0; i < readingsPerSensor; i++) {\n        const index = sensor * readingsPerSensor + i;\n        const reading = Number(values[index]);\n\n        result.push({\n            payload: {\n                measurement: \"sensor_data\",\n                value: reading,\n                sequence: baseSequence + index,\n                timestamp: new Date(baseTimestamp + index * timeStep).toISOString(),\n                sensor_id: `sensor_${ sensor + 1}`\n            }\n        });\n    }\n}\n\nreturn [result];\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 300,
        "wires": [
            [
                "7701405c8a7ed7d9"
            ]
        ]
    },
    {
        "id": "5d3d7afe95690940",
        "type": "debug",
        "z": "6761cd81a24d274a",
        "name": "debug 1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 420,
        "y": 220,
        "wires": []
    },
    {
        "id": "7701405c8a7ed7d9",
        "type": "debug",
        "z": "6761cd81a24d274a",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 340,
        "wires": []
    },
    {
        "id": "18d3dd12ac8f58c2",
        "type": "mqtt-broker",
        "name": "HÃ¤nischMqtt",
        "broker": "aicon.dhbw-heidenheim.de",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    }
]